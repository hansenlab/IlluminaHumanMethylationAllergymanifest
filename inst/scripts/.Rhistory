file.exists(manifestFile)
file.exits("extdata")
file.exists("extdata")
maniTmp
names(maniTmp)
names(maniTmp$manifestList)
sapply(maniTmp$manifestList, nrow)
head(maniTmp$manifest)
table(maniTmp$manifest$Rep_Num, exclude = "")
table(maniTmp$manifest$Probe_Type, exclude = "")
table(maniTmp$manifest$Strand_FR, exclude = "")
table(maniTmp$manifest$Strand_TB, exclude = "")
table(maniTmp$manifest$Strand_CO, exclude = "")
table(maniTmp$manifest$Infinium_Design, exclude = "")
table(maniTmp$manifest$Infinium_Design_Type, exclude = "")
n
ls()
assay.line
colNames
control.line
n
head(manifeest$AddreessA_ID)
head(manifest$AddreessA_ID)
head(manifest$AddressA_ID)
names(manifest)
0
TypeI <- manifest[
        manifest$Infinium_Design_Type == "I",
        c("Name", "AddressA_ID", "AddressB_ID", "Color_Channel", "Next_Base",
          "AlleleA_ProbeSeq", "AlleleB_ProbeSeq")]
    
head(TypeI)
0
    names(TypeI)[c(2, 3, 4, 5, 6, 7)] <- c(
        "AddressA", "AddressB", "Color", "NextBase", "ProbeSeqA", "ProbeSeqB")

head(TypeI)
0
TypeI$nCpG <- as.integer(
        oligonucleotideFrequency(TypeI$ProbeSeqB, width = 2)[, "CG"] - 1L)
    
head(TypeI)
head(TypeSnpI)
0
args(grepl)
args(grep)
head(TypeI)
    TypeII <- manifest[
        manifest$Infinium_Design_Type == "II",
        c("Name", "AddressA_ID", "AlleleA_ProbeSeq")]
    names(TypeII)[c(2,3)] <- c("AddressA", "ProbeSeqA")
    TypeII <- as(TypeII, "DataFrame")
    TypeII$ProbeSeqA <- DNAStringSet(TypeII$ProbeSeqA)
    TypeII$nCpG <- as.integer(letterFrequency(TypeII$ProbeSeqA, letters = "R"))
    TypeII$nCpG[TypeII$nCpG < 0] <- 0L
    TypeSnpII <- TypeII[grep("^rs", TypeII$Name), ]
    TypeII <- TypeII[grep("^rs", TypeII$Name, invert=TRUE), ]

    controls <- read.table(

        file = file,
        skip = control.line,
        sep = ",",
        comment.char = "",
        quote = "",
        colClasses = c(rep("character", 5)))[, 1:5]
    TypeControl <- controls[, 1:4]
    names(TypeControl) <- c("Address", "Type", "Color", "ExtendedType")
    TypeControl <- as(TypeControl, "DataFrame")

ls()
had(TypeI)
head(TypeI)
head(TypeII)
head(TypeSnpI)
head(TypeSnpII)
head(TypeControl)
head(controls)
Q
epioc
eeepic
epic
warnings()
IlluminaHumanMethylationAllergymanifest
0
head(anno)
names(anno)
sum(is.na(anno$Forward_Seq))
sum(is.na(anno$Source_Seq))
nam[c("AddressA_ID", "AddressB_ID", "AlleleA_ProbeSeq", "AlleleB_ProbeSeq",
            "Infinium_Design_Type", "Next_Base", "Color_Channel")] <-  c("AddressA", "AddressB",
                                                                         "ProbeSeqA", "ProbeSeqB",
                                                                         "Type", "NextBase", "Color")

nam
0
anyDuplicated(anno$Name)
anno[355,]
anno[anno$Name == 
anno[anno$Name == "cg00096396",]
head(maniTmp$manifest)
table(sapply(strplit(maniTmp$manifest$IllmID, "_"), "[[", 2))
table(sapply(strsplit(maniTmp$manifest$IllmID, "_"), "[[", 2))
table(sapply(strsplit(maniTmp$manifest$IllmID, "_"), "[", 2))
0
head(sapply(strsplit(maniTmp$manifest$IlmnID, "_"))
)
head(strsplit(maniTmp$manifest$IlmnID, "_"))
head(sapply(strsplit(maniTmp$manifest$IlmnID, "_"), FUN = "[[", 2))
table(sapply(strsplit(maniTmp$manifest$IlmnID, "_"), FUN = "[[", 2))
head(anno)
head(maniTmp$manifest)
anno[anno$Name == "cg00096396",]
maniTmp$manifest[anno$Name == "cg00096396",]
lapply(maniTmp$manifesttList, head, n = 2)
lapply(maniTmp$manifestList, head, n = 2)
dim(anno)
head(anno)
dim(maniTmp%manifest)
dim(maniTmp$manifest)
head(anno)
dim(maniTmp$manifest)
dim(anno)
head(Locations)
0
head(Locations)
head(anno)
head(Locations[is.na(Locations$chr),])
head(Locations[which(is.na(Locations$chr)),])
head(which(is.na(Locations$chr)))
Locations[c(943,944),]
anno[c(943,944),]
head(anno)
head(which(is.na(anno$CHR)))
sapply(maniTmp$manifestList, head)
head(which(is.na(anno$CHR)))
head(Other)
0
ls()
0
pkgName
getwd()
names(epic)
epic$nFields
epic$nSNPsRead
epic$ChipType
q()
0
list.files("../../..")
0
head(anno)
getManifestInfo(IlluminaHumanMethylationAllergymanifest, type = "locusNames")
search()
getManifest(IlluminaHumanMethylationAllergymanifest)
getManifest("IlluminaHumanMethylationAllergymanifest")
getManifest(IlluminaHumanMethylationAllergymanifest)
0
getManifest
get("getManifest", signature = class(IlluminaHumanMethylationAllergymanifest))
getMethod("getManifest", signature = class(IlluminaHumanMethylationAllergymanifest))
updateObject(IlluminaHumanMethylationAllergymanifest)
getMethod("updateObject", signature = class(IlluminaHumanMethylationAllergymanifest))
IlluminaHumanMethylationAllergymanifest
IlluminaHumanMethylationAllergymanifest@data
?lockEnvironment
environmeentIsLocked(IlluminaHumanMethylationAllergymanifest@data)
environmentIsLocked(IlluminaHumanMethylationAllergymanifest@data)
q()
0
geetwd()
getwd()
0
search()
sessionInfo()
getManifest
?lockEnvironment
q()
unlockBinding
library(minfi)
q()
annoObj
annoObj@data
ls(annoObj@data)
get("Manifest", annoObj@data)
q()
